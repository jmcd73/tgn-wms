{"version":3,"sources":["App.js","index.js"],"names":["App","Component","constructor","props","super","this","state","allPicked","selectMessage","shipments","shipment","message","showAlert","selectOnChange","bind","fetchShipperPallets","handleDismiss","setState","togglePicked","id","isChecked","pickAll","postPickedEditUrl","baseUrl","labels","JSON","parse","stringify","pallets","ids","pickedState","map","obj","idx","picked","filter","x","every","newState","fetch","method","mode","credentials","headers","window","csrfToken","Accept","body","then","r","ok","json","Error","status","statusText","d","messageResult","result","setTimeout","catch","e","fetchShipperPalletsUrl","crendentials","allArePicked","label","parseInt","target","value","componentDidMount","openShipmentsUrl","length","console","log","render","palletsCount","palletsPicked","pickedClass","sort","a","b","location","className","controlId","onChange","componentClass","placeholder","key","shipper","destination","onDismiss","bsStyle","as","active","style","float","checked","isPicked","isPickedClass","pl_ref","item","description","root","document","getElementById","getAttribute","ReactDOM"],"mappings":"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","file":"static/js/main.4645bab4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/lib/Alert\";\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/lib/ListGroupItem\";\nimport FormGroup from \"react-bootstrap/lib/FormGroup\";\nimport ControlLabel from \"react-bootstrap/lib/ControlLabel\";\nimport FormControl from \"react-bootstrap/lib/FormControl\";\nimport Checkbox from \"react-bootstrap/lib/Checkbox\";\nimport Cookies from \"js-cookie\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allPicked: false,\n      selectMessage: \"Select a shipper\",\n      shipments: [],\n      shipment: {},\n      message: \"\",\n      showAlert: false\n    };\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.fetchShipperPallets = this.fetchShipperPallets.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n  }\n\n  handleDismiss() {\n    this.setState({ showAlert: !this.state.showAlert });\n  }\n\n  togglePicked(id, isChecked, pickAll = false) {\n    const postPickedEditUrl = this.props.baseUrl + \"Pallets/multiEdit/\";\n\n    let labels = JSON.parse(JSON.stringify(this.state.shipment.pallets));\n    let ids = [];\n    let pickedState = {};\n\n    if (pickAll) {\n      ids = labels.map((obj, idx) => {\n        labels[idx].picked = isChecked;\n        return { id: obj.id, picked: isChecked };\n      });\n\n      pickedState = { allPicked: isChecked };\n    } else {\n      ids = labels\n        .map((obj, idx) => {\n          if (labels[idx].id === id) {\n            labels[idx].picked = isChecked;\n            return { id: obj.id, picked: isChecked };\n          }\n          return null;\n        })\n        .filter(x => x);\n\n      const allArePicked = labels.every((obj, idx) => {\n        return obj.picked;\n      });\n      pickedState = { allPicked: allArePicked };\n    }\n\n    let newState = {\n      ...this.state,\n      shipment: {\n        ...this.state.shipment,\n        pallets: [...labels]\n      },\n      ...pickedState\n    };\n\n    this.setState(newState);\n\n    fetch(postPickedEditUrl, {\n      method: \"POST\",\n      mode: \"cors\",\n      credentials: \"include\",\n      headers: {\n        \"X-CSRF-Token\": window.csrfToken,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      },\n      body: JSON.stringify(ids)\n    })\n      .then(r => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\n          \"Failed to POST to \" +\n            postPickedEditUrl +\n            \": \" +\n            r.status +\n            \" \" +\n            r.statusText\n        );\n      })\n      .then(d => {\n        this.setState(\n          {\n            message: d.message,\n            messageResult: d.result,\n            showAlert: true\n          },\n          () => {\n            setTimeout(() => {\n              this.setState({ showAlert: false });\n            }, 3000);\n          }\n        );\n      })\n      .catch(e => {\n        this.setState({\n          message: e.message || \"error updating picked status\",\n          messageResult: \"danger\",\n          showAlert: true\n        });\n      });\n  }\n\n  fetchShipperPallets(id) {\n    const fetchShipperPalletsUrl = this.props.baseUrl + \"Shipments/view/\";\n    fetch(fetchShipperPalletsUrl + id, {\n      method: \"GET\",\n      mode: \"cors\",\n      crendentials: \"include\",\n      headers: {\n        Accept: \"application/json\"\n      }\n    })\n      .then(r => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\"failed to request \" + fetchShipperPalletsUrl);\n      })\n      .then(d => {\n        this.setState({ shipment: d });\n        const allArePicked = d.pallets.every(label => {\n          return label.picked;\n        });\n\n        this.setState({\n          allPicked: allArePicked\n        });\n      })\n      .catch(e => {});\n  }\n\n  selectOnChange(e) {\n    const selectValue = parseInt(e.target.value);\n    if (selectValue !== 0) {\n      this.fetchShipperPallets(e.target.value);\n    } else {\n      this.setState({ shipment: {} });\n    }\n  }\n  componentDidMount() {\n    const openShipmentsUrl = this.props.baseUrl + \"Shipments/openShipments\";\n    fetch(openShipmentsUrl, {\n      method: \"GET\",\n      mode: \"cors\",\n      crendentials: \"include\",\n      headers: {\n        Accept: \"application/json\"\n      }\n    })\n      .then(r => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\n          \"failed to request \" +\n            openShipmentsUrl +\n            \" \" +\n            r.status +\n            \" \" +\n            r.statusText\n        );\n      })\n      .then(d => {\n        if (d.shipments.length === 0) {\n          this.setState({\n            selectMessage: \"Reload the page to check for new shippers\"\n          });\n        } else {\n          this.setState(d);\n        }\n      })\n      .catch(e => {\n        console.log(e);\n        this.setState({\n          message: e.message,\n          messageResult: \"danger\",\n          showAlert: true\n        });\n      });\n  }\n  render() {\n    const { shipments, shipment } = this.state;\n    let { pallets } = shipment;\n    let palletsCount = 0;\n    let palletsPicked = 0;\n    const defaultPickedClass = \"label-warning\";\n    let pickedClass = defaultPickedClass;\n    let allPicked = false;\n\n    if (pallets) {\n      pallets.sort(function(a, b) {\n        if (a.location.location < b.location.location) return -1;\n        if (a.location.location > b.location.location) return 1;\n        return 0;\n      });\n      palletsCount = pallets.length;\n      palletsPicked = pallets.filter(x => {\n        //console.log(x);\n        return x.picked === true;\n      }).length;\n\n      if (palletsCount === palletsPicked) {\n        allPicked = true;\n        pickedClass = \"label-success\";\n      }\n    }\n\n    return (\n      <div className=\"col\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <FormGroup controlId=\"formControlsSelect\">\n              <ControlLabel>Select a shipper</ControlLabel>\n              <FormControl\n                onChange={this.selectOnChange}\n                componentClass=\"select\"\n                placeholder=\"select\"\n              >\n                <option key={1} value={0}>\n                  {this.state.selectMessage}\n                </option>\n                {shipments.map((shipper, idx) => {\n                  return (\n                    <option key={shipper.id} value={shipper.id}>\n                      {shipper.shipper} {shipper.destination}\n                    </option>\n                  );\n                })}\n              </FormControl>\n            </FormGroup>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-sm-12\">\n            {this.state.showAlert && (\n              <Alert\n                onDismiss={this.handleDismiss}\n                bsStyle={this.state.messageResult}\n              >\n                {this.state.message}\n              </Alert>\n            )}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-sm-12\">\n            {pallets && (\n              <ListGroup as=\"ul\">\n                <ListGroupItem key={0} as=\"li\" active>\n                  <h3 className=\"list-group-item-heading\">\n                    {shipments.shipper}\n                    <span\n                      style={{ float: \"right\" }}\n                      className={`label ${pickedClass}`}\n                    >\n                      {palletsPicked}/{palletsCount}\n                    </span>\n                  </h3>\n                  <p className=\"list-group-item-text\">\n                    {shipments.destination}\n                  </p>\n\n                  <Checkbox\n                    checked={this.state.allPicked}\n                    onChange={e =>\n                      this.togglePicked(null, !this.state.allPicked, true)\n                    }\n                  >\n                    Mark all as picked\n                  </Checkbox>\n                </ListGroupItem>\n\n                {pallets.map((value, idx) => {\n                  const isPicked = value.picked;\n                  let isPickedClass = \"list-group-item\";\n\n                  if (isPicked && !allPicked) {\n                    isPickedClass += \" list-group-item-info\";\n                  }\n                  if (allPicked) {\n                    isPickedClass += \" list-group-item-success\";\n                  }\n\n                  return (\n                    <ListGroupItem\n                      as=\"li\"\n                      className={isPickedClass}\n                      key={value.id}\n                    >\n                      <h4 className=\"list-group-item-heading\">\n                        {value.location.location}\n                      </h4>\n                      <p className=\"list-group-item-text\">{value.pl_ref}</p>\n                      <p className=\"list-group-item-text\">\n                        {\" \"}\n                        {value.item} {value.description}\n                      </p>\n                      <Checkbox\n                        checked={isPicked}\n                        onChange={e => {\n                          this.togglePicked(value.id, e.target.checked);\n                        }}\n                      >\n                        Picked\n                      </Checkbox>\n                    </ListGroupItem>\n                  );\n                })}\n              </ListGroup>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"react-app-polyfill/ie11\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById(\"root\");\n\nconst baseUrl = root.getAttribute(\"data-baseurl\");\n\nReactDOM.render(<App baseUrl={baseUrl} />, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}