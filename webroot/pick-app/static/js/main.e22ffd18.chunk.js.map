{"version":3,"sources":["App.js","index.js"],"names":["App","Component","constructor","props","super","this","state","allPicked","selectMessage","shipments","shipment","message","showAlert","selectOnChange","bind","fetchShipperPallets","handleDismiss","setState","togglePicked","id","isChecked","pickAll","console","log","postPickedEditUrl","baseUrl","labels","JSON","parse","stringify","pallets","ids","pickedState","map","obj","idx","picked","filter","x","every","newState","fetch","method","mode","credentials","headers","window","csrfToken","Accept","body","then","r","ok","json","Error","status","statusText","d","messageResult","result","setTimeout","catch","e","fetchShipperPalletsUrl","crendentials","allArePicked","label","parseInt","target","value","componentDidMount","openShipmentsUrl","length","render","palletsCount","palletsPicked","pickedClass","sort","a","b","location","className","Form","Group","controlId","Label","Control","onChange","as","placeholder","key","shipper","destination","Alert","onClose","variant","ListGroup","ListGroupItem","active","style","float","Check","Input","checked","isPicked","isPickedClass","pl_ref","item","description","root","document","getElementById","getAttribute","ReactDOM"],"mappings":"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","file":"static/js/main.e22ffd18.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { ListGroupItem } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allPicked: false,\n      selectMessage: \"Select a shipper\",\n      shipments: [],\n      shipment: {},\n      message: \"\",\n      showAlert: false,\n    };\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.fetchShipperPallets = this.fetchShipperPallets.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n  }\n\n  handleDismiss() {\n    this.setState({ showAlert: !this.state.showAlert });\n  }\n\n  togglePicked(id, isChecked, pickAll = false) {\n    console.log(\"togglePicked\");\n    const postPickedEditUrl = this.props.baseUrl + \"Pallets/multiEdit/\";\n\n    let labels = JSON.parse(JSON.stringify(this.state.shipment.pallets));\n    let ids = [];\n    let pickedState = {};\n\n    if (pickAll) {\n      ids = labels.map((obj, idx) => {\n        labels[idx].picked = isChecked;\n        return { id: obj.id, picked: isChecked };\n      });\n\n      pickedState = { allPicked: isChecked };\n    } else {\n      ids = labels\n        .map((obj, idx) => {\n          if (labels[idx].id === id) {\n            labels[idx].picked = isChecked;\n            return { id: obj.id, picked: isChecked };\n          }\n          return null;\n        })\n        .filter((x) => x);\n\n      const allArePicked = labels.every((obj, idx) => {\n        return obj.picked;\n      });\n      pickedState = { allPicked: allArePicked };\n    }\n\n    let newState = {\n      ...this.state,\n      shipment: {\n        ...this.state.shipment,\n        pallets: [...labels],\n      },\n      ...pickedState,\n    };\n\n    this.setState(newState);\n\n    fetch(postPickedEditUrl, {\n      method: \"POST\",\n      mode: \"cors\",\n      credentials: \"include\",\n      headers: {\n        \"X-CSRF-Token\": window.csrfToken,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      },\n      body: JSON.stringify(ids),\n    })\n      .then((r) => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\n          \"Failed to POST to \" +\n            postPickedEditUrl +\n            \": \" +\n            r.status +\n            \" \" +\n            r.statusText\n        );\n      })\n      .then((d) => {\n        this.setState(\n          {\n            message: d.message,\n            messageResult: d.result,\n            showAlert: true,\n          },\n          () => {\n            setTimeout(() => {\n              this.setState({ showAlert: false });\n            }, 3000);\n          }\n        );\n      })\n      .catch((e) => {\n        this.setState({\n          message: e.message || \"error updating picked status\",\n          messageResult: \"danger\",\n          showAlert: true,\n        });\n      });\n  }\n\n  fetchShipperPallets(id) {\n    const fetchShipperPalletsUrl = this.props.baseUrl + \"Shipments/view/\";\n    fetch(fetchShipperPalletsUrl + id, {\n      method: \"GET\",\n      mode: \"cors\",\n      crendentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n      .then((r) => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\"failed to request \" + fetchShipperPalletsUrl);\n      })\n      .then((d) => {\n        this.setState({ shipment: d });\n        const allArePicked = d.pallets.every((label) => {\n          return label.picked;\n        });\n\n        this.setState({\n          allPicked: allArePicked,\n        });\n      })\n      .catch((e) => {});\n  }\n\n  selectOnChange(e) {\n    const selectValue = parseInt(e.target.value);\n    if (selectValue !== 0) {\n      this.fetchShipperPallets(e.target.value);\n    } else {\n      this.setState({ shipment: {} });\n    }\n  }\n  componentDidMount() {\n    const openShipmentsUrl = this.props.baseUrl + \"Shipments/openShipments\";\n    fetch(openShipmentsUrl, {\n      method: \"GET\",\n      mode: \"cors\",\n      crendentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n      .then((r) => {\n        if (r.ok) {\n          return r.json();\n        }\n        throw new Error(\n          \"failed to request \" +\n            openShipmentsUrl +\n            \" \" +\n            r.status +\n            \" \" +\n            r.statusText\n        );\n      })\n      .then((d) => {\n        if (d.shipments.length === 0) {\n          this.setState({\n            selectMessage: \"Reload the page to check for new shippers\",\n          });\n        } else {\n          this.setState(d);\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n        this.setState({\n          message: e.message,\n          messageResult: \"danger\",\n          showAlert: true,\n        });\n      });\n  }\n  render() {\n    const { shipments, shipment } = this.state;\n    let { pallets } = shipment;\n    let palletsCount = 0;\n    let palletsPicked = 0;\n    const defaultPickedClass = \"label-warning\";\n    let pickedClass = defaultPickedClass;\n    let allPicked = false;\n\n    if (pallets) {\n      pallets.sort(function (a, b) {\n        if (a.location.location < b.location.location) return -1;\n        if (a.location.location > b.location.location) return 1;\n        return 0;\n      });\n      palletsCount = pallets.length;\n      palletsPicked = pallets.filter((x) => {\n        //console.log(x);\n        return x.picked === true;\n      }).length;\n\n      if (palletsCount === palletsPicked) {\n        allPicked = true;\n        pickedClass = \"label-success\";\n      }\n    }\n\n    return (\n      <div className=\"col\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Form.Group controlId=\"formControlsSelect\">\n              <Form.Label>Select a shipper</Form.Label>\n              <Form.Control\n                onChange={this.selectOnChange}\n                as=\"select\"\n                placeholder=\"select\"\n              >\n                <option key={1} value={0}>\n                  {this.state.selectMessage}\n                </option>\n                {shipments.map((shipper, idx) => {\n                  return (\n                    <option key={shipper.id} value={shipper.id}>\n                      {shipper.shipper} {shipper.destination}\n                    </option>\n                  );\n                })}\n              </Form.Control>\n            </Form.Group>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-sm-12\">\n            {this.state.showAlert && (\n              <Alert\n                onClose={this.handleDismiss}\n                variant={this.state.messageResult}\n              >\n                {this.state.message}\n              </Alert>\n            )}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-sm-12\">\n            {pallets && (\n              <ListGroup as=\"ul\">\n                <ListGroupItem key={0} as=\"li\" active>\n                  <h3 className=\"list-group-item-heading\">\n                    {shipments.shipper}\n                    <span\n                      style={{ float: \"right\" }}\n                      className={`label ${pickedClass}`}\n                    >\n                      {palletsPicked}/{palletsCount}\n                    </span>\n                  </h3>\n                  <p className=\"list-group-item-text\">\n                    {shipments.destination}\n                  </p>\n\n                  <Form.Check>\n                    <Form.Check.Label>\n                      <Form.Check.Input\n                        onChange={(e) =>\n                          this.togglePicked(null, !this.state.allPicked, true)\n                        }\n                        checked={this.state.allPicked}\n                      ></Form.Check.Input>\n                      Mark all as picked\n                    </Form.Check.Label>\n                  </Form.Check>\n                </ListGroupItem>\n\n                {pallets.map((value, idx) => {\n                  const isPicked = value.picked;\n                  let isPickedClass = \"list-group-item\";\n\n                  if (isPicked && !allPicked) {\n                    isPickedClass += \" list-group-item-info\";\n                  }\n                  if (allPicked) {\n                    isPickedClass += \" list-group-item-success\";\n                  }\n\n                  return (\n                    <ListGroupItem\n                      as=\"li\"\n                      className={isPickedClass}\n                      key={value.id}\n                    >\n                      <h4 className=\"list-group-item-heading\">\n                        {value.location.location}\n                      </h4>\n                      <p className=\"list-group-item-text\">{value.pl_ref}</p>\n                      <p className=\"list-group-item-text\">\n                        {\" \"}\n                        {value.item} {value.description}\n                      </p>\n                      <Form.Check>\n                        <Form.Check.Label>\n                          <Form.Check.Input\n                            checked={isPicked}\n                            onChange={(e) => {\n                              this.togglePicked(value.id, e.target.checked);\n                            }}\n                          ></Form.Check.Input>\n                          Picked\n                        </Form.Check.Label>\n                      </Form.Check>\n                    </ListGroupItem>\n                  );\n                })}\n              </ListGroup>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"react-app-polyfill/ie11\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById(\"root\");\n\nconst baseUrl = root.getAttribute(\"data-baseurl\");\n\nReactDOM.render(<App baseUrl={baseUrl} />, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}