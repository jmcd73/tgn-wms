{"version":3,"sources":["Wrap.js","WrapCheckbox.js","AlertMessage.js","App.js","serviceWorker.js","index.js"],"names":["Wrap","props","children","popoverText","CustomPopover","placement","console","log","Popover","id","title","WrapCheckbox","disabled","childKey","OverlayTrigger","trigger","rootClose","overlay","style","padding","margin","key","AlertMessage","variant","strongText","normalText","onDismiss","options","success","icon","faCheckCircle","warning","faExclamation","info","faInfoCircle","danger","faExclamationTriangle","CSSTransition","in","show","timeout","classNames","unmountOnExit","Alert","App","defaults","isExpanded","products","shipmentTypeDisabled","labelLists","loading","redirect","labelCounts","showAlert","errors","operationName","shipment","operation","shipment_type","shipped","shipper","destination","product_type_id","labelIds","isTypeAheadLoading","productType","productTypeName","activeKey","loadedData","productTypes","baseUrl","state","setProductType","bind","updateActiveKey","getLabelList","addRemoveLabel","toggleIsExpanded","buildLabelString","getLabelObject","toggleShipped","toggleAlert","setShipmentDetail","submitData","value","this","setState","n","productTypeOrId","suffix","filter","x","url","join","fetch","headers","Accept","then","resp","json","d","allPallets","thisShipmentPallets","concat","shipment_labels","map","pallet","thisShipment","forEach","pl","updateCodeDescriptions","catch","e","palletObject","item","description","codeDesc","buildCodeDescString","itemId","item_id","updateSingleLabelCount","getSingleItemLabelCount","indexOf","productArray","index","length","itemString","count","ctr","reduce","accum","current","push","productTitle","labelList","idx","currentLabelList","newLabelList","product","Object","keys","newAlertState","setTimeout","postObject","pallets","urlArg","labels","cur","shipment_id","fetchOptions","method","mode","cache","credentials","window","csrfToken","body","JSON","stringify","response","error","fieldName","isAdd","labelId","target","parseRouterArgs","fetchData","match","params","undefined","ProductType","name","obj","location","best_before","pl_ref","qty","shipperError","formatErrors","shippedError","destinationError","selectedCount","labelsOnShipment","classes","spinner","Row","Col","lg","className","size","color","FormCheck","checked","label","onChange","Form","onSubmit","preventDefault","FormGroup","controlId","FormLabel","FormControl","type","isValid","getValidationState","placeholder","newState","required","Feedback","FormText","isLoading","selected","onInputChange","onSearch","query","labelKey","validation","Button","onClick","Card","Header","as","Badge","Body","FormCheckClasses","slice","faBan","pointerEvents","labelText","React","Component","exported","withRouter","Boolean","hostname","root","document","getElementById","getAttribute","ReactDOM","render","path","exact","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21292834.chunk.js","sourcesContent":["import React from \"react\";\n/* wrap in div if dev and nothing if production */\nconst Wrap = (props) => {\n  let renderThis = null;\n\n  if (process.env.NODE_ENV === \"development\") {\n    renderThis = <div className=\"container\">{props.children}</div>;\n  } else {\n    renderThis = <>{props.children}</>;\n  }\n  return renderThis;\n};\n\nexport default Wrap;\n","import React from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\n\nconst popoverText = (\n  <>\n    <p>\n      This pallet doesn&apos;t have enough days product life left before it\n      expires to allow it to ship.\n    </p>\n    <p>\n      You won&apos;t be able to add this pallet to a shipper until you mark it\n      as being allowed to ship.\n    </p>\n    <ol>\n      <li>Leave this screen and go to Warehouse => View Stock.</li>\n      <li>Find the pallet and click it&apos;s \"Edit\" link</li>\n      <li>If a login screen appears login with your username and password</li>\n      <li>Tick the &quot;Ship low dated&quot; checkbox</li>\n      <li>click Submit</li>\n    </ol>\n  </>\n);\n\nconst CustomPopover = (props) => {\n  const { placement } = props;\n  console.log(props);\n\n  return (\n    <Popover\n      {...props}\n      id={`popover-positioned-${placement}`}\n      title={`Low Dated Stock`}\n    >\n      {popoverText}\n    </Popover>\n  );\n};\nconst WrapCheckbox = (props) => {\n  const { disabled, children, childKey } = props;\n  if (disabled) {\n    return (\n      <OverlayTrigger\n        placement=\"bottom\"\n        trigger=\"click\"\n        rootClose={true}\n        //container={document}\n        overlay={<CustomPopover />}\n      >\n        <span style={{ padding: 0, margin: 0 }} key={childKey}>\n          {children}\n        </span>\n      </OverlayTrigger>\n    );\n  } else {\n    return children;\n  }\n};\n\nexport default WrapCheckbox;\n","import React from \"react\";\n//import Alert from \"react-bootstrap/lib/Alert\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faExclamation,\n  faInfoCircle,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./AlertMessage.css\";\nimport { CSSTransition } from \"react-transition-group\";\nconst AlertMessage = (props) => {\n  const { variant, strongText, normalText, onDismiss } = props;\n  const options = {\n    success: { icon: faCheckCircle },\n    warning: { icon: faExclamation },\n    info: { icon: faInfoCircle },\n    danger: { icon: faExclamationTriangle },\n  };\n\n  return (\n    <CSSTransition\n      in={props.show}\n      timeout={300}\n      classNames=\"toggen\"\n      unmountOnExit\n    >\n      <Alert onDismiss={onDismiss} variant={variant}>\n        <strong>\n          <FontAwesomeIcon icon={options[variant].icon} /> {strongText}{\" \"}\n        </strong>{\" \"}\n        {normalText}\n      </Alert>\n    </CSSTransition>\n  );\n};\n\nexport default AlertMessage;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { withRouter } from \"react-router\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport FormText from \"react-bootstrap/FormText\";\nimport Wrap from \"./Wrap\";\nimport WrapCheckbox from \"./WrapCheckbox\";\nimport AlertMessage from \"./AlertMessage\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./ShipApp.css\";\n\n// import queryString from \"query-string\";\n\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\"; // ES2015\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaults = {\n      isExpanded: {},\n      products: [],\n      shipmentTypeDisabled: false,\n      labelLists: {},\n      loading: false,\n      redirect: false,\n      labelCounts: {},\n      showAlert: false,\n      errors: {},\n      operationName: \"\",\n      shipment: {\n        operation: \"\",\n        id: \"\",\n        shipment_type: \"\",\n        shipped: false,\n        shipper: \"\",\n        destination: \"\",\n        product_type_id: \"\",\n        labelIds: [],\n      },\n      isTypeAheadLoading: false,\n      productType: 0,\n      productTypeName: \"\",\n      activeKey: 99999,\n      loadedData: [],\n      options: [],\n      productTypes: [],\n      baseUrl: this.props.baseUrl,\n    };\n    this.state = {\n      ...this.defaults,\n    };\n\n    this.setProductType = this.setProductType.bind(this);\n    this.updateActiveKey = this.updateActiveKey.bind(this);\n    this.getLabelList = this.getLabelList.bind(this);\n    this.addRemoveLabel = this.addRemoveLabel.bind(this);\n    this.toggleIsExpanded = this.toggleIsExpanded.bind(this);\n    this.buildLabelString = this.buildLabelString.bind(this);\n    this.getLabelObject = this.getLabelObject.bind(this);\n    this.toggleShipped = this.toggleShipped.bind(this);\n    this.toggleAlert = this.toggleAlert.bind(this);\n    this.setShipmentDetail = this.setShipmentDetail.bind(this);\n    this.submitData = this.submitData.bind(this);\n  }\n\n  setShipmentDetail(key, value) {\n    this.setState({\n      shipment: { ...this.state.shipment, [key]: value },\n    });\n  }\n\n  updateActiveKey(n) {\n    this.setState({ activeKey: n });\n  }\n\n  fetchData(operation, productTypeOrId) {\n    this.setState({\n      ...this.defaults,\n      loading: true,\n    });\n\n    const suffix = [operation, productTypeOrId].filter((x) => x);\n\n    const url = this.state.baseUrl + \"Shipments/\" + suffix.join(\"/\");\n\n    fetch(url, {\n      headers: {\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      },\n    })\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((d) => {\n        let allPallets = [];\n        let operationName = \"\";\n        switch (operation) {\n          case \"add-shipment\":\n            operationName = \"Add\";\n            allPallets = d[\"shipment_labels\"];\n            this.setState({\n              operationName,\n              productType: productTypeOrId,\n              loadedData: allPallets,\n              shipment: {\n                ...this.state.shipment,\n                operation,\n              },\n            });\n            break;\n          case \"edit-shipment\":\n            operationName = \"Edit\";\n            const thisShipmentPallets = d[\"thisShipment\"][\"pallets\"];\n            allPallets = thisShipmentPallets.concat(d.shipment_labels);\n            this.setState({\n              operationName,\n              loadedData: allPallets,\n            });\n            const labelIds = thisShipmentPallets.map((pallet) => {\n              return pallet.id;\n            });\n            this.setState({\n              productType: d[\"thisShipment\"][\"product_type_id\"],\n              shipment: {\n                ...this.state.shipment,\n                ...d.thisShipment,\n                operation,\n                labelIds: labelIds,\n              },\n            });\n            break;\n          default:\n            break;\n        }\n\n        allPallets.forEach((pl) => {\n          this.updateCodeDescriptions(pl);\n        });\n\n        this.setState({\n          loading: false,\n        });\n      })\n      .catch((e) => console.log(e));\n  }\n\n  buildCodeDescString(palletObject) {\n    return palletObject.item + \" \" + palletObject.description;\n  }\n  /**\n   *\n   * @param {*} palletObject\n   */\n  updateCodeDescriptions(palletObject) {\n    let { products, loadedData, isExpanded } = this.state;\n\n    const codeDesc = this.buildCodeDescString(palletObject);\n    const { item_id: itemId } = palletObject;\n    this.updateSingleLabelCount(\n      codeDesc,\n      this.getSingleItemLabelCount(loadedData, itemId)\n    );\n\n    if (products.indexOf(codeDesc) === -1) {\n      this.setState({\n        isExpanded: {\n          ...isExpanded,\n          [codeDesc]: false,\n        },\n        products: [codeDesc, ...products],\n      });\n    }\n  }\n\n  getSingleItemLabelCount(productArray, itemId) {\n    return productArray.filter((value, index) => {\n      return value.item_id === itemId;\n    }).length;\n  }\n  updateSingleLabelCount(itemString, count) {\n    let labelCounts = { ...this.state.labelCounts };\n\n    this.setState({\n      labelCounts: { ...labelCounts, [itemString]: count },\n    });\n  }\n  createCodeDescriptions(productArray = []) {\n    let ctr = 0;\n    let labelCounts = {};\n\n    const codeDesc = productArray.reduce((accum, current) => {\n      const codeDesc = this.buildCodeDescString(current);\n      if (accum.indexOf(codeDesc) === -1) {\n        accum.push(codeDesc);\n        ctr = 1;\n      }\n\n      labelCounts[codeDesc] = ctr++;\n\n      return accum;\n    }, []);\n    this.setState({\n      labelCounts: { ...this.state.labelCounts, ...labelCounts },\n    });\n    return codeDesc;\n  }\n  getLabelList(productTitle) {\n    console.log(\"getLabelList\");\n    const loadedData = this.state.loadedData;\n\n    const labelList = loadedData.reduce((accum, current, idx) => {\n      const codeDesc = current.item + \" \" + current.description;\n      if (codeDesc === productTitle) {\n        accum.push(current);\n      }\n      return accum;\n    }, []);\n    let currentLabelList = this.state.labelLists;\n    let newLabelList = { ...currentLabelList, [productTitle]: labelList };\n    this.setState({ labelLists: newLabelList });\n  }\n  toggleIsExpanded(product, idx) {\n    let isExpanded = { ...this.state.isExpanded };\n\n    Object.keys(isExpanded).forEach((key) => {\n      if (key === product) {\n        isExpanded[key] = !isExpanded[key];\n      } else {\n        isExpanded[key] = false;\n      }\n    });\n    //isExpanded[product] = !isExpanded[product];\n    console.log(\"toggleExpanded\", isExpanded, product);\n    this.setState({ isExpanded: isExpanded });\n  }\n\n  toggleAlert() {\n    const newAlertState = !this.state.showAlert;\n    this.setState({ showAlert: newAlertState });\n    if (newAlertState) {\n      setTimeout(() => {\n        this.setState({ showAlert: !newAlertState });\n      }, 4000);\n    }\n  }\n\n  submitData() {\n    this.setState({\n      errors: {},\n      loading: true,\n    });\n    const { baseUrl, productType } = this.state;\n\n    const {\n      operation,\n      shipper,\n      shipped,\n      id,\n      destination,\n      labelIds,\n    } = this.state.shipment;\n\n    let postObject = {\n      shipper: shipper,\n      destination: destination,\n      shipped: shipped,\n      product_type_id: productType,\n      pallets: labelIds,\n    };\n    let urlArg = \"\";\n    switch (operation) {\n      case \"add-shipment\":\n        urlArg = productType;\n        break;\n      case \"edit-shipment\":\n        urlArg = id;\n        postObject.id = id;\n        const labels = labelIds.map((cur) => {\n          return { shipment_id: id, id: cur };\n        });\n        postObject = { ...postObject, pallets: labels };\n        break;\n      default:\n        console.log(\"it broken\");\n    }\n\n    const parts = [operation, urlArg].filter((x) => x);\n\n    const url = baseUrl + \"Shipments/\" + parts.join(\"/\");\n\n    let fetchOptions = {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"X-CSRF-Token\": window.csrfToken,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      },\n      redirect: \"error\",\n      body: JSON.stringify(postObject),\n    };\n\n    fetch(url, fetchOptions)\n      .then((response) => response.json())\n      .then((d) => {\n        /**\n                 *  \"error\": {\n        \"shipper\": [\n            \"Shipment number must be unique\"\n        ]\n    },\n                 */\n        if (d.error) {\n          // eslint-disable-next-line array-callback-return\n          Object.keys(d.error).map((fieldName) => {\n            this.setState({\n              errors: {\n                ...this.state.errors,\n                [fieldName]: d.error[fieldName],\n              },\n            });\n          });\n        } else {\n          this.setState({\n            redirect: true,\n          });\n        }\n        this.setState({ loading: false });\n      });\n  }\n\n  toggleShipped() {\n    this.setState({\n      shipment: {\n        ...this.state.shipment,\n        shipped: !this.state.shipment.shipped,\n      },\n    });\n  }\n\n  addRemoveLabel(isAdd, labelId) {\n    let { shipment } = this.state;\n    let labelIds = [...shipment.labelIds];\n\n    this.updateCodeDescriptions(this.getLabelObject(labelId)[0]);\n\n    if (isAdd && labelIds.indexOf(labelId) === -1) {\n      labelIds.push(labelId);\n    }\n    if (!isAdd) {\n      labelIds = labelIds.filter((value) => {\n        return value !== labelId;\n      });\n    }\n\n    this.setState({\n      shipment: { ...shipment, labelIds: labelIds },\n    });\n  }\n  setProductType(e) {\n    const productType = e.target.value;\n\n    if (productType === \"\") {\n      this.setState({ products: [] });\n      return;\n    }\n    if (this.state.productType !== productType) {\n      this.setState({ productType: productType });\n      const { operation, productTypeOrId } = this.parseRouterArgs();\n      this.fetchData(operation, productTypeOrId);\n    }\n  }\n\n  parseRouterArgs() {\n    // gotta fix this it's ugggggly move it out of here\n    let { operation, productTypeOrId } = this.props.match.params;\n\n    return { operation, productTypeOrId };\n  }\n\n  getValidationState(fieldName) {\n    if (this.state.errors[fieldName] !== undefined) {\n      return \"error\";\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const { operation, productTypeOrId } = this.parseRouterArgs();\n    this.setState({\n      baseUrl: this.props.baseUrl,\n    });\n    this.fetchData(operation, productTypeOrId);\n  }\n\n  getProductType(productType) {\n    const url = this.state.baseUrl + `ProductTypes/view/${productType}`;\n\n    if (productType) {\n      fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      })\n        .then((resp) => {\n          return resp.json();\n        })\n        .then((d) => {\n          if (d.productType.ProductType) {\n            this.setState({\n              productTypeName: d.productType.ProductType.name,\n            });\n          }\n          console.log(\"pt\", d);\n        })\n        .catch((e) => {\n          throw e;\n        });\n    }\n  }\n\n  formatErrors(fieldName) {\n    let errors = [];\n    if (this.state.errors[fieldName]) {\n      let obj = this.state.errors[fieldName];\n\n      errors = Object.keys(obj).map((key) => {\n        return obj[key];\n      });\n    }\n\n    return errors.join(\", \");\n  }\n\n  getLabelObject(id) {\n    const { loadedData } = this.state;\n\n    const ret = loadedData.filter((current, idx) => {\n      return current.id === id;\n    });\n    return ret;\n  }\n  buildLabelString(palletObject) {\n    const {\n      location,\n      item,\n      best_before,\n      pl_ref,\n      qty,\n      description,\n    } = palletObject;\n\n    const locationName = location.location;\n\n    const stringValues = [\n      locationName,\n      item,\n      best_before,\n      pl_ref,\n      qty,\n      description,\n    ];\n    return stringValues.join(\", \");\n  }\n  render() {\n    const {\n      products,\n      labelLists,\n      showAlert,\n      labelCounts,\n      isExpanded,\n      shipment,\n      productTypeName,\n      loading,\n      errors,\n      baseUrl,\n      operationName,\n    } = this.state;\n\n    const shipperError = this.formatErrors(\"shipper\");\n    const shippedError = this.formatErrors(\"shipped\");\n    const destinationError = this.formatErrors(\"destination\");\n    const { labelIds, shipper, shipped, operation } = shipment;\n    const selectedCount = labelIds.length;\n    let labelsOnShipment = null;\n    let classes = [\"FormCheck\", \"fixed\", \"pallet-list\"];\n    let spinner = null;\n    if (loading) {\n      spinner = (\n        <Row>\n          <Col lg={12}>\n            <div className=\"text-center\">\n              <PulseLoader loading={loading} size={14} color={\"#ddd\"} />\n            </div>\n          </Col>\n        </Row>\n      );\n    }\n\n    if (labelIds) {\n      labelsOnShipment = labelIds.map((id, idx) => {\n        const palletObject = this.getLabelObject(id)[0];\n        return (\n          <FormCheck\n            key={palletObject.pl_ref}\n            id={`checkbox-{id}`}\n            checked\n            label={this.buildLabelString(palletObject)}\n            onChange={(e) =>\n              this.addRemoveLabel(e.target.checked, palletObject.id)\n            }\n          />\n        );\n      });\n    }\n\n    if (this.state.redirect && process.env.NODE_ENV === \"production\") {\n      window.location = baseUrl + \"Shipments/\";\n    }\n\n    return (\n      <Wrap>\n        <Row>\n          <Col lg={12}>\n            <AlertMessage\n              strongText=\"bold this\"\n              normalText=\"Message that\"\n              variant=\"info\"\n              show={showAlert}\n              onDismiss={this.toggleAlert}\n            />\n            <h3>{operationName} Shipment</h3>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12}>\n            <Form.Row onSubmit={(e) => e.preventDefault()}>\n              <Col lg={3}>\n                <FormGroup controlId=\"shipper\">\n                  <FormLabel>Shipment</FormLabel>{\" \"}\n                  <FormControl\n                    type=\"text\"\n                    value={shipper}\n                    isValid={this.getValidationState(\"shipper\")}\n                    placeholder=\"Shipment\"\n                    onChange={(e) => {\n                      const { shipper, ...newState } = this.state.errors;\n                      this.setState({\n                        errors: {\n                          ...newState,\n                        },\n                      });\n\n                      this.setShipmentDetail(e.target.id, e.target.value);\n                    }}\n                    required=\"required\"\n                  />\n                  <FormControl.Feedback />\n                  <FormText>{shipperError}</FormText>\n                </FormGroup>\n              </Col>\n              <Col lg={3}>\n                <FormGroup controlId=\"destination\">\n                  <FormLabel>Destination</FormLabel>\n                  <AsyncTypeahead\n                    placeholder=\"Destination\"\n                    isLoading={this.state.isTypeAheadLoading}\n                    id=\"destination\"\n                    name=\"destination\"\n                    isValid={this.getValidationState(\"destination\")}\n                    selected={[this.state.shipment.destination]}\n                    onChange={(selected) => {\n                      if (selected.length > 0) {\n                        let destination = selected[0].value;\n                        this.setShipmentDetail(\"destination\", destination);\n                      }\n                    }}\n                    onInputChange={(destination) => {\n                      this.setShipmentDetail(\"destination\", destination);\n                    }}\n                    onSearch={(query) => {\n                      this.setState({ isTypeAheadLoading: true });\n                      fetch(\n                        `${this.state.baseUrl}Shipments/destinationLookup?term=${query}`,\n                        {\n                          headers: {\n                            Accept: \"application/json\",\n                          },\n                        }\n                      )\n                        .then((resp) => resp.json())\n                        .then((json) => {\n                          console.log(json);\n                          this.setState({\n                            isTypeAheadLoading: false,\n                            options: json,\n                          });\n                        });\n                    }}\n                    labelKey=\"value\"\n                    options={this.state.options}\n                  />\n                  <FormText>{destinationError}</FormText>\n                </FormGroup>\n              </Col>\n            </Form.Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={1}>\n            <FormGroup validation={this.getValidationState(\"shipped\")}>\n              <FormCheck\n                validation={this.getValidationState(\"shipped\")}\n                checked={shipped}\n                id=\"shipped\"\n                onChange={this.toggleShipped}\n                label=\"Shipped\"\n              />\n              <FormText>{shippedError}</FormText>\n            </FormGroup>\n          </Col>\n          <Col lg={5} className=\"mb-3\">\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              className=\"my-btn\"\n              onClick={this.submitData}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          </Col>\n          <Col lg={6}>{spinner}</Col>\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"pre-scrollable\">\n              <div className=\"card-container\">\n                <Card key={`card-top-level`}>\n                  {products &&\n                    products.map((product, idx) => {\n                      return (\n                        <>\n                          <Card.Header\n                            onClick={() => {\n                              this.getLabelList(product);\n                              this.toggleIsExpanded(product, idx);\n                            }}\n                            as=\"h5\"\n                            className=\"toggen-header\"\n                            key={`header-{idx}`}\n                          >\n                            {\" \"}\n                            {product}{\" \"}\n                            {labelCounts[product] && (\n                              <Badge variant=\"primary\">\n                                {labelCounts[product]}\n                              </Badge>\n                            )}\n                          </Card.Header>\n                          {labelLists[product] && isExpanded[product] && (\n                            <Card.Body\n                              className={isExpanded[product] && \"open\"}\n                            >\n                              {labelLists[product].map((value, idx) => {\n                                let icon = null;\n                                let FormCheckClasses = classes.slice();\n                                const checked =\n                                  this.state.shipment.labelIds.indexOf(\n                                    value.id\n                                  ) > -1;\n                                let style = {};\n                                if (value.disabled) {\n                                  FormCheckClasses.push(\"bg-danger\");\n                                  icon = (\n                                    <>\n                                      <FontAwesomeIcon icon={faBan} />{\" \"}\n                                    </>\n                                  );\n                                  style = { pointerEvents: \"none\" };\n                                }\n                                let labelText = this.buildLabelString(value);\n                                if (icon) {\n                                  labelText = icon + labelText;\n                                }\n\n                                return (\n                                  <WrapCheckbox\n                                    key={value.pl_ref}\n                                    childKey={value.pl_ref}\n                                    disabled={value.disabled}\n                                  >\n                                    <FormCheck\n                                      disabled={value.disabled}\n                                      checked={checked}\n                                      style={style}\n                                      key={value.pl_ref}\n                                      id={value.pl_ref}\n                                      onChange={(e) =>\n                                        this.addRemoveLabel(\n                                          e.target.checked,\n                                          value.id\n                                        )\n                                      }\n                                      label={labelText}\n                                    />\n                                  </WrapCheckbox>\n                                );\n                              })}\n                            </Card.Body>\n                          )}\n                        </>\n                      );\n                    })}\n                </Card>\n              </div>\n            </div>\n          </Col>\n          <Col>\n            <Card>\n              <Card.Header as=\"h5\">\n                Currently On Shipment{\" \"}\n                <Badge variant=\"primary\">{selectedCount}</Badge>\n              </Card.Header>\n              {labelsOnShipment.length > 0 && (\n                <Card.Body>{labelsOnShipment}</Card.Body>\n              )}\n            </Card>\n          </Col>\n        </Row>\n      </Wrap>\n    );\n  }\n}\n\nconst exported = withRouter(App);\n\nexport default exported;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Switch } from \"react-router\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = document.getElementById(\"root\");\n\nconst baseUrl = root.getAttribute(\"data-baseurl\");\n\nReactDOM.render(\n  <BrowserRouter key={`br-1`}>\n    <Switch key={`sw-1`}>\n      <Route\n        key={`route-1`}\n        path=\"/\"\n        exact\n        render={(props) => <App {...props} key={`app-1`} baseUrl={baseUrl} />}\n      />\n      <Route\n        key={`route-2`}\n        path=\"/:operation(edit-shipment|add-shipment)/:productTypeOrId?\"\n        render={(props) => <App {...props} key={`app-2`} baseUrl={baseUrl} />}\n      />\n      <Route\n        key={`route-3`}\n        path={`${baseUrl}shipments/process/:operation(edit-shipment|add-shipment)/:productTypeOrId?`}\n        render={(props) => <App {...props} key={`app-3`} baseUrl={baseUrl} />}\n      />\n    </Switch>\n  </BrowserRouter>,\n  root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}