{"version":3,"sources":["Wrap.js","WrapCheckbox.js","AlertMessage.js","App.js","serviceWorker.js","index.js"],"names":["Wrap","props","children","popoverText","CustomPopover","placement","console","log","Popover","id","title","WrapCheckbox","disabled","childKey","OverlayTrigger","trigger","rootClose","overlay","style","padding","margin","key","AlertMessage","bsStyle","strongText","normalText","onDismiss","options","success","icon","faCheckCircle","warning","faExclamation","info","faInfoCircle","danger","faExclamationTriangle","CSSTransition","in","show","timeout","classNames","unmountOnExit","Alert","App","defaults","isExpanded","products","shipmentTypeDisabled","labelLists","loading","redirect","labelCounts","showAlert","errors","shipment","operation","shipment_type","shipped","shipper","destination","product_type_id","labelIds","isLoading","productType","productTypeName","activeKey","loadedData","productTypes","baseUrl","state","setProductType","bind","updateActiveKey","getLabelList","addRemoveLabel","toggleIsExpanded","buildLabelString","getLabelObject","toggleShipped","toggleAlert","setShipmentDetail","submitData","value","this","setState","n","suffix","filter","x","url","join","fetch","headers","Accept","then","resp","json","d","codeDescs","createCodeDescriptions","shipment_labels","thisShipment","pallets","map","location","concat","fill","catch","e","labelObject","item","description","codeDesc","buildCodeDescString","itemId","item_id","updateSingleLabelCount","getSingleItemLabelCount","indexOf","productArray","index","length","itemString","count","ctr","reduce","accum","current","push","productTitle","labelList","idx","currentLabelList","newLabelList","b","newAlertState","setTimeout","postObject","labels","cur","shipment_id","fetchOptions","method","mode","cache","credentials","window","csrfToken","body","JSON","stringify","response","error","Object","keys","fieldName","isAdd","labelId","updateCodeDescriptions","target","parseRouterArgs","fetchData","match","params","typeOrId","isNaN","undefined","getProductType","ProductType","name","best_before","pl_ref","qty","shipperError","shippedError","destinationError","selectedCount","labelsOnShipment","classes","spinner","Row","Col","lg","className","size","color","FormCheck","bsClass","checked","label","onChange","textTransform","Form","onSubmit","preventDefault","FormGroup","validationState","getValidationState","bsSize","controlId","FormLabel","FormControl","type","placeholder","newState","required","Feedback","FormText","selected","onInputChange","onSearch","query","labelKey","Button","onClick","onSelect","product","Card","eventKey","expanded","onToggle","Header","Title","toggle","Badge","variant","Body","FormCheckClasses","slice","faBan","pointerEvents","labelText","React","Component","exported","withRouter","Boolean","hostname","root","document","getElementById","getAttribute","ReactDOM","render","path","exact","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d3c72b8.chunk.js","sourcesContent":["import React from \"react\";\n/* wrap in div if dev and nothing if production */\nconst Wrap = (props) => {\n  let renderThis = null;\n\n  if (process.env.NODE_ENV === \"development\") {\n    renderThis = <div className=\"container\">{props.children}</div>;\n  } else {\n    renderThis = <>{props.children}</>;\n  }\n  return renderThis;\n};\n\nexport default Wrap;\n","import React from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\n\nconst popoverText = (\n  <>\n    <p>\n      This pallet doesn&apos;t have enough days product life left before it\n      expires to allow it to ship.\n    </p>\n    <p>\n      You won&apos;t be able to add this pallet to a shipper until you mark it\n      as being allowed to ship.\n    </p>\n    <ol>\n      <li>Leave this screen and go to Warehouse => View Stock.</li>\n      <li>Find the pallet and click it&apos;s \"Edit\" link</li>\n      <li>If a login screen appears login with your username and password</li>\n      <li>Tick the &quot;Ship low dated&quot; checkbox</li>\n      <li>click Submit</li>\n    </ol>\n  </>\n);\n\nconst CustomPopover = (props) => {\n  const { placement } = props;\n  console.log(props);\n\n  return (\n    <Popover\n      {...props}\n      id={`popover-positioned-${placement}`}\n      title={`Low Dated Stock`}\n    >\n      {popoverText}\n    </Popover>\n  );\n};\nconst WrapCheckbox = (props) => {\n  const { disabled, children, childKey } = props;\n  if (disabled) {\n    return (\n      <OverlayTrigger\n        placement=\"bottom\"\n        trigger=\"click\"\n        rootClose={true}\n        //container={document}\n        overlay={<CustomPopover />}\n      >\n        <span style={{ padding: 0, margin: 0 }} key={childKey}>\n          {children}\n        </span>\n      </OverlayTrigger>\n    );\n  } else {\n    return children;\n  }\n};\n\nexport default WrapCheckbox;\n","import React from \"react\";\n//import Alert from \"react-bootstrap/lib/Alert\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faExclamation,\n  faInfoCircle,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./AlertMessage.css\";\nimport { CSSTransition } from \"react-transition-group\";\nconst AlertMessage = (props) => {\n  const { bsStyle, strongText, normalText, onDismiss } = props;\n  const options = {\n    success: { icon: faCheckCircle },\n    warning: { icon: faExclamation },\n    info: { icon: faInfoCircle },\n    danger: { icon: faExclamationTriangle },\n  };\n\n  return (\n    <CSSTransition\n      in={props.show}\n      timeout={300}\n      classNames=\"toggen\"\n      unmountOnExit\n    >\n      <Alert onDismiss={onDismiss} bsStyle={bsStyle}>\n        <strong>\n          <FontAwesomeIcon icon={options[bsStyle].icon} /> {strongText}{\" \"}\n        </strong>{\" \"}\n        {normalText}\n      </Alert>\n    </CSSTransition>\n  );\n};\n\nexport default AlertMessage;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { withRouter } from \"react-router\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport FormText from \"react-bootstrap/FormText\";\nimport Wrap from \"./Wrap\";\nimport WrapCheckbox from \"./WrapCheckbox\";\nimport AlertMessage from \"./AlertMessage\";\nimport Form from \"react-bootstrap/Form\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\n// import queryString from \"query-string\";\n\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\"; // ES2015\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaults = {\n      isExpanded: [],\n      products: [],\n      shipmentTypeDisabled: false,\n      labelLists: {},\n      loading: false,\n      redirect: false,\n      labelCounts: {},\n      showAlert: false,\n      errors: {},\n      shipment: {\n        operation: \"\",\n        id: \"\",\n        shipment_type: \"\",\n        shipped: false,\n        shipper: \"\",\n        destination: \"\",\n        product_type_id: \"\",\n        labelIds: [],\n      },\n      isLoading: false,\n      productType: 0,\n      productTypeName: \"\",\n      activeKey: 99999,\n      loadedData: [],\n      options: [],\n      productTypes: [],\n      baseUrl: this.props.baseUrl,\n    };\n    this.state = {\n      ...this.defaults,\n    };\n\n    this.setProductType = this.setProductType.bind(this);\n    this.updateActiveKey = this.updateActiveKey.bind(this);\n    this.getLabelList = this.getLabelList.bind(this);\n    this.addRemoveLabel = this.addRemoveLabel.bind(this);\n    this.toggleIsExpanded = this.toggleIsExpanded.bind(this);\n    this.buildLabelString = this.buildLabelString.bind(this);\n    this.getLabelObject = this.getLabelObject.bind(this);\n    this.toggleShipped = this.toggleShipped.bind(this);\n    this.toggleAlert = this.toggleAlert.bind(this);\n    this.setShipmentDetail = this.setShipmentDetail.bind(this);\n    this.submitData = this.submitData.bind(this);\n  }\n\n  setShipmentDetail(key, value) {\n    this.setState({\n      shipment: { ...this.state.shipment, [key]: value },\n    });\n  }\n\n  updateActiveKey(n) {\n    this.setState({ activeKey: n });\n  }\n\n  fetchData(operation, productType, id) {\n    this.setState({\n      ...this.defaults,\n      loading: true,\n      productType: productType || \"\",\n    });\n\n    const suffix = [operation, productType, id].filter((x) => x);\n    const url = this.state.baseUrl + \"Shipments/\" + suffix.join(\"/\");\n    console.log(\"fetching\", url);\n    fetch(url, {\n      headers: {\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      },\n    })\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((d) => {\n        const codeDescs = this.createCodeDescriptions(d.shipment_labels);\n\n        if (d.thisShipment) {\n          const {\n            shipper,\n            destination,\n            shipped,\n            shipment_type,\n            product_type_id,\n            id,\n            pallets,\n          } = d.thisShipment;\n\n          const loadedData = pallets.map((value) => {\n            const location = { ...value.location };\n\n            delete value.location;\n            return {\n              ...value,\n              location,\n            };\n          });\n\n          const labelIds = pallets.map((value) => {\n            return value.id;\n          });\n\n          let state = {\n            loadedData: loadedData.concat(d.shipment_labels),\n            isExpanded: [...codeDescs].fill(false),\n            products: codeDescs,\n            loading: false,\n            shipmentTypeDisabled: true,\n            shipment: {\n              ...this.state.shipment,\n              operation: operation,\n              shipment_type,\n              shipped,\n              id,\n              shipper,\n              product_type_id,\n              destination,\n              labelIds,\n            },\n          };\n\n          if (product_type_id) {\n            state.productType = product_type_id;\n          }\n          this.setState(state);\n        }\n      })\n      .catch((e) => console.log(e));\n  }\n\n  buildCodeDescString(labelObject) {\n    return labelObject.item + \" \" + labelObject.description;\n  }\n  /**\n   *\n   * @param {*} labelObject\n   */\n  updateCodeDescriptions(labelObject) {\n    let { products, loadedData } = this.state;\n\n    const codeDesc = this.buildCodeDescString(labelObject);\n    const { item_id: itemId } = labelObject;\n    this.updateSingleLabelCount(\n      codeDesc,\n      this.getSingleItemLabelCount(loadedData, itemId)\n    );\n\n    if (products.indexOf(codeDesc) === -1) {\n      this.setState({\n        products: [codeDesc, ...products],\n      });\n    }\n  }\n\n  getSingleItemLabelCount(productArray, itemId) {\n    return productArray.filter((value, index) => {\n      return value.item_id === itemId;\n    }).length;\n  }\n  updateSingleLabelCount(itemString, count) {\n    let labelCounts = { ...this.state.labelCounts };\n\n    this.setState({\n      labelCounts: { ...labelCounts, [itemString]: count },\n    });\n  }\n  createCodeDescriptions(productArray = []) {\n    let ctr = 0;\n    let labelCounts = {};\n\n    const codeDesc = productArray.reduce((accum, current) => {\n      const codeDesc = this.buildCodeDescString(current);\n      if (accum.indexOf(codeDesc) === -1) {\n        accum.push(codeDesc);\n        ctr = 1;\n      }\n\n      labelCounts[codeDesc] = ctr++;\n\n      return accum;\n    }, []);\n    this.setState({\n      labelCounts: { ...this.state.labelCounts, ...labelCounts },\n    });\n    return codeDesc;\n  }\n  getLabelList(productTitle) {\n    const loadedData = this.state.loadedData;\n\n    const labelList = loadedData.reduce((accum, current, idx) => {\n      const codeDesc = current.item + \" \" + current.description;\n      if (codeDesc === productTitle) {\n        accum.push(current);\n      }\n      return accum;\n    }, []);\n    let currentLabelList = this.state.labelLists;\n    let newLabelList = { ...currentLabelList, [productTitle]: labelList };\n    this.setState({ labelLists: newLabelList });\n  }\n  toggleIsExpanded(b, idx) {\n    let isExpanded = [...this.state.isExpanded];\n    isExpanded[idx] = b;\n    this.setState({ isExpanded: isExpanded });\n  }\n\n  toggleAlert() {\n    const newAlertState = !this.state.showAlert;\n    this.setState({ showAlert: newAlertState });\n    if (newAlertState) {\n      setTimeout(() => {\n        this.setState({ showAlert: !newAlertState });\n      }, 4000);\n    }\n  }\n\n  submitData() {\n    this.setState({\n      errors: {},\n      loading: true,\n    });\n    const { baseUrl, productType } = this.state;\n\n    const {\n      operation,\n      shipper,\n      shipped,\n      id,\n      destination,\n      labelIds,\n    } = this.state.shipment;\n\n    const parts = [operation, id].filter((x) => x);\n\n    const url = baseUrl + \"Shipments/\" + parts.join(\"/\");\n\n    let postObject = {\n      shipper: shipper,\n      destination: destination,\n      shipped: shipped,\n      product_type_id: productType,\n      pallets: labelIds,\n    };\n\n    switch (operation) {\n      case \"add-shipment\":\n        break;\n      case \"edit-shipment\":\n        postObject.id = id;\n        const labels = labelIds.map((cur) => {\n          return { shipment_id: id, id: cur };\n        });\n        postObject = { ...postObject, pallets: labels };\n        break;\n      default:\n        console.log(\"it broken\");\n    }\n\n    let fetchOptions = {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"X-CSRF-Token\": window.csrfToken,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      },\n      redirect: \"error\",\n      body: JSON.stringify(postObject),\n    };\n\n    fetch(url, fetchOptions)\n      .then((response) => response.json())\n      .then((d) => {\n        /**\n                 *  \"error\": {\n        \"shipper\": [\n            \"Shipment number must be unique\"\n        ]\n    },\n                 */\n        if (d.error) {\n          // eslint-disable-next-line array-callback-return\n          Object.keys(d.error).map((fieldName) => {\n            this.setState({\n              errors: {\n                ...this.state.errors,\n                [fieldName]: d.error[fieldName].join(\", \"),\n              },\n            });\n          });\n        } else {\n          this.setState({\n            redirect: true,\n          });\n        }\n        this.setState({ loading: false });\n      });\n  }\n\n  toggleShipped() {\n    this.setState({\n      shipment: {\n        ...this.state.shipment,\n        shipped: !this.state.shipment.shipped,\n      },\n    });\n  }\n\n  addRemoveLabel(isAdd, labelId) {\n    let { shipment } = this.state;\n    let labelIds = [...shipment.labelIds];\n\n    this.updateCodeDescriptions(this.getLabelObject(labelId)[0]);\n\n    if (isAdd && labelIds.indexOf(labelId) === -1) {\n      labelIds.push(labelId);\n    }\n    if (!isAdd) {\n      labelIds = labelIds.filter((value) => {\n        return value !== labelId;\n      });\n    }\n\n    this.setState({\n      shipment: { ...shipment, labelIds: labelIds },\n    });\n  }\n  setProductType(e) {\n    const productType = e.target.value;\n\n    if (productType === \"\") {\n      this.setState({ products: [] });\n      return;\n    }\n    if (this.state.productType !== productType) {\n      this.setState({ productType: productType });\n      const { operation, id } = this.parseRouterArgs();\n      this.fetchData(operation, productType, id);\n    }\n  }\n\n  parseRouterArgs() {\n    // gotta fix this it's ugggggly move it out of here\n    let { operation, typeOrId } = this.props.match.params;\n    let productType = null;\n    let id = null;\n\n    switch (operation) {\n      case \"add-shipment\": {\n        if (!typeOrId) {\n          productType = this.state.productType;\n        } else {\n          productType = typeOrId;\n        }\n        break;\n      }\n      case \"edit-shipment\": {\n        if (!isNaN(typeOrId)) {\n          console.log(\"typeOrId isInteger\");\n          id = typeOrId;\n        }\n        this.setState({\n          shipmentTypeDisabled: true,\n        });\n        break;\n      }\n      default:\n        operation = \"add-shipment\";\n        productType = this.state.productType;\n    }\n\n    return { operation: operation, productType: productType, id: id };\n  }\n\n  getValidationState(fieldName) {\n    if (this.state.errors[fieldName] !== undefined) {\n      return \"error\";\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const { operation, productType, id } = this.parseRouterArgs();\n\n    console.log({ operation, productType, id });\n    this.setState({\n      baseUrl: this.props.baseUrl,\n    });\n    this.fetchData(operation, productType, id);\n    this.getProductType(productType);\n  }\n\n  getProductType(productType) {\n    const url = this.state.baseUrl + `ProductTypes/view/${productType}`;\n    console.log(\"fetching\", url);\n    if (productType) {\n      fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      })\n        .then((resp) => {\n          return resp.json();\n        })\n        .then((d) => {\n          if (d.productType.ProductType) {\n            this.setState({\n              productTypeName: d.productType.ProductType.name,\n            });\n          }\n          console.log(\"pt\", d);\n        })\n        .catch((e) => {\n          throw e;\n        });\n    }\n  }\n\n  getLabelObject(id) {\n    const { loadedData } = this.state;\n    console.log(\"getLabelObject ID\", id, loadedData);\n    const ret = loadedData.filter((current, idx) => {\n      return current.id === id;\n    });\n    return ret;\n  }\n  buildLabelString(labelObject) {\n    const {\n      location,\n      item,\n      best_before,\n      pl_ref,\n      qty,\n      description,\n    } = labelObject;\n\n    const locationName = location.location;\n\n    const stringValues = [\n      locationName,\n      item,\n      best_before,\n      pl_ref,\n      qty,\n      description,\n    ];\n    return stringValues.join(\", \");\n  }\n  render() {\n    const {\n      products,\n      labelLists,\n      showAlert,\n      labelCounts,\n      isExpanded,\n      shipment,\n      productTypeName,\n      loading,\n      errors,\n      baseUrl,\n    } = this.state;\n\n    const shipperError = errors[\"shipper\"] || \"\";\n    const shippedError = errors[\"shipped\"] || \"\";\n    const destinationError = errors[\"destination\"] || \"\";\n    const { labelIds, shipper, shipped, operation } = shipment;\n    const selectedCount = labelIds.length;\n    let labelsOnShipment = null;\n    let classes = [\"FormCheck\", \"fixed\", \"pallet-list\"];\n    let spinner = null;\n    if (loading) {\n      spinner = (\n        <Row>\n          <Col lg={12}>\n            <div className=\"text-center\">\n              <PulseLoader loading={loading} size={14} color={\"#ddd\"} />\n            </div>\n          </Col>\n        </Row>\n      );\n    }\n\n    if (labelIds) {\n      labelsOnShipment = labelIds.map((id, idx) => {\n        const labelObject = this.getLabelObject(id)[0];\n        return (\n          <FormCheck\n            bsClass={classes.join(\" \")}\n            key={labelObject.pl_ref}\n            checked\n            label={this.buildLabelString(labelObject)}\n            onChange={(e) =>\n              this.addRemoveLabel(e.target.checked, labelObject.id)\n            }\n          />\n        );\n      });\n    }\n\n    if (this.state.redirect && process.env.NODE_ENV === \"production\") {\n      window.location = baseUrl + \"Shipments/\";\n    }\n\n    return (\n      <Wrap>\n        <Row>\n          <Col lg={12}>\n            <AlertMessage\n              strongText=\"bold this\"\n              normalText=\"Message that\"\n              bsStyle=\"info\"\n              show={showAlert}\n              onDismiss={this.toggleAlert}\n            />\n\n            <h3\n              style={{ textTransform: \"capitalize\" }}\n            >{`${operation} ${productTypeName} Shipment`}</h3>\n          </Col>\n        </Row>\n        <Row className=\"mb-3\">\n          <Col lg={12}>\n            <Form onSubmit={(e) => e.preventDefault()}>\n              <Row>\n                <Col lg={3}>\n                  <FormGroup\n                    validationState={this.getValidationState(\"shipper\")}\n                    bsSize=\"sm\"\n                    controlId=\"shipper\"\n                  >\n                    <FormLabel>Shipment</FormLabel>{\" \"}\n                    <FormControl\n                      type=\"text\"\n                      value={shipper}\n                      placeholder=\"Shipment\"\n                      onChange={(e) => {\n                        const { shipper, ...newState } = this.state.errors;\n                        this.setState({\n                          errors: {\n                            ...newState,\n                          },\n                        });\n\n                        this.setShipmentDetail(e.target.id, e.target.value);\n                      }}\n                      required=\"required\"\n                    />\n                    <FormControl.Feedback />\n                    <FormText>{shipperError}</FormText>\n                  </FormGroup>\n                </Col>\n                <Col lg={3}>\n                  <FormGroup\n                    controlId=\"destination\"\n                    bsSize={\"sm\"}\n                    validationState={this.getValidationState(\"destination\")}\n                  >\n                    <FormLabel>Destination</FormLabel>\n                    <AsyncTypeahead\n                      placeholder=\"Destination\"\n                      isLoading={this.state.isLoading}\n                      id=\"destination\"\n                      name=\"destination\"\n                      selected={[this.state.shipment.destination]}\n                      onChange={(selected) => {\n                        if (selected.length > 0) {\n                          let destination = selected[0].value;\n                          this.setShipmentDetail(\"destination\", destination);\n                        }\n                      }}\n                      onInputChange={(destination) => {\n                        this.setShipmentDetail(\"destination\", destination);\n                      }}\n                      onSearch={(query) => {\n                        this.setState({ isLoading: true });\n                        fetch(\n                          `${this.state.baseUrl}Shipments/destinationLookup?term=${query}`,\n                          {\n                            headers: {\n                              Accept: \"application/json\",\n                            },\n                          }\n                        )\n                          .then((resp) => resp.json())\n                          .then((json) => {\n                            console.log(json);\n                            this.setState({\n                              isLoading: false,\n                              options: json,\n                            });\n                          });\n                      }}\n                      labelKey=\"value\"\n                      options={this.state.options}\n                    />\n                    <FormText>{destinationError}</FormText>\n                  </FormGroup>\n                </Col>\n                <Col lg={4}>\n                  <FormGroup\n                    className=\"cb-shipped\"\n                    validationState={this.getValidationState(\"shipped\")}\n                  >\n                    <FormCheck\n                      validationState={this.getValidationState(\"shipped\")}\n                      checked={shipped}\n                      onChange={this.toggleShipped}\n                      label=\"Shipped\"\n                    />\n                    <FormText>{shippedError}</FormText>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col lg={6}>\n                  <Button\n                    bsStyle=\"primary\"\n                    bsSize=\"sm\"\n                    className=\"my-btn\"\n                    onClick={this.submitData}\n                    type=\"submit\"\n                  >\n                    Submit\n                  </Button>\n                </Col>\n                <Col lg={6}>{spinner}</Col>\n              </Row>\n            </Form>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <div className=\"pre-scrollable\">\n              <div\n                id=\"accordion-controlled-example\"\n                activeKey={this.state.activeKey}\n                onSelect={this.updateActiveKey}\n              >\n                {products &&\n                  products.map((product, idx) => {\n                    return (\n                      <Card\n                        key={`panel-${idx}`}\n                        eventKey={`panel-${idx}`}\n                        expanded={isExpanded[idx]}\n                        onToggle={(b) => {\n                          this.toggleIsExpanded(b, idx);\n                        }}\n                      >\n                        <Card.Header>\n                          <Card.Title\n                            onClick={() => this.getLabelList(product)}\n                            toggle\n                          >\n                            {product}{\" \"}\n                            {labelCounts[product] && (\n                              <Badge variant=\"primary\">\n                                {labelCounts[product]}\n                              </Badge>\n                            )}\n                          </Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                          {labelLists[product] &&\n                            labelLists[product].map((value, idx) => {\n                              let icon = null;\n                              let FormCheckClasses = classes.slice();\n                              const checked =\n                                this.state.shipment.labelIds.indexOf(value.id) >\n                                -1;\n                              let style = {};\n                              if (value.disabled) {\n                                FormCheckClasses.push(\"bg-danger\");\n                                icon = (\n                                  <>\n                                    <FontAwesomeIcon icon={faBan} />{\" \"}\n                                  </>\n                                );\n                                style = { pointerEvents: \"none\" };\n                              }\n                              let labelText = this.buildLabelString(value);\n                              if (icon) {\n                                labelText = icon + labelText;\n                              }\n\n                              return (\n                                <WrapCheckbox\n                                  key={value.pl_ref}\n                                  childKey={value.pl_ref}\n                                  disabled={value.disabled}\n                                >\n                                  <FormCheck\n                                    bsClass={FormCheckClasses.join(\" \")}\n                                    disabled={value.disabled}\n                                    checked={checked}\n                                    style={style}\n                                    key={value.pl_ref}\n                                    onChange={(e) =>\n                                      this.addRemoveLabel(\n                                        e.target.checked,\n                                        value.id\n                                      )\n                                    }\n                                    label={labelText}\n                                  />\n                                </WrapCheckbox>\n                              );\n                            })}\n                        </Card.Body>\n                      </Card>\n                    );\n                  })}\n              </div>\n            </div>\n          </Col>\n          <Col>\n            <Card>\n              <Card.Header>\n                <Card.Title>\n                  Currently On Shipment{\" \"}\n                  <Badge variant=\"primary\">{selectedCount}</Badge>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>{labelsOnShipment}</Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Wrap>\n    );\n  }\n}\n\nconst exported = withRouter(App);\n\nexport default exported;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Switch } from \"react-router\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = document.getElementById(\"root\");\n\nconst baseUrl = root.getAttribute(\"data-baseurl\");\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route\n        path=\"/\"\n        exact\n        render={(props) => <App {...props} baseUrl={baseUrl} />}\n      />\n      <Route\n        path=\"/:operation(edit-shipment|add-shipment)/:typeOrId?\"\n        render={(props) => <App {...props} baseUrl={baseUrl} />}\n      />\n      <Route\n        path={`${baseUrl}shipments/process/:operation(edit-shipment|add-shipment)/:typeOrId?`}\n        render={(props) => <App {...props} baseUrl={baseUrl} />}\n      />\n    </Switch>\n  </BrowserRouter>,\n  root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}