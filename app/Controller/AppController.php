<?php

/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @package       app.Controller
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
App::uses('Controller', 'Controller');
App::uses('CakeTime', 'Utility');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package        app.Controller
 * @link        http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    /**
     * @var array
     */
    public $components = [
        //'DebugKit.Toolbar',
         //'Session',
         'RequestHandler', //added json views
         'Flash',
        'Auth' => [
            'loginRedirect' => [
                'controller' => 'pages',
                'action' => 'display',
                'index'
            ],
            'logoutRedirect' => [
                'controller' => 'pages',
                'action' => 'display',
                'index'
            ],
            'authorize' => ['Controller'], // Added this line
             'flash' => [
                'key' => 'auth',
                'element' => 'error'],
            'authError' => "You cannot access that function without the correct permission.",
            'authenticate' => [
                'Form' => [
                    'passwordHasher' => 'Blowfish'
                ]
            ]
        ]
    ];

    /**
     * Added to allow dynamic addition of DebugKit.Toolbar
     */
    public function __construct($request = null, $response = null)
    {
        //Load DebugKit is is necessary
        //$this->components = $this->defaultComponents;
        if (getenv('CAKEPHP_DEBUG')) {
            $this->components[] = 'DebugKit.Toolbar';
        }

        parent::__construct($request, $response); // TODO: Change the autogenerated stub
    }

    # make the settings table available from all controllers
    /**
     * @var array
     */
    public $uses = ['Setting'];

    # enable Time
    # 'Form', 'Html',
    /**
     * @var array
     */
    public $helpers = [
        'Time',
        'Nav' => [
            'className' => 'NavBar' // extends BootstrapNavbarHelper
        ],
        'Html' => [
            'className' => 'ToggenHtml'
        ],
        'Form' => [
            'className' => 'ToggenForm'
        ],
        'Modal' => [
            'className' => 'Bootstrap3.BootstrapModal'
        ]
    ];
    /**
     * beforeFilter
     */
    public function beforeFilter()
    {
        if (isset($this->request->params['requested'])) {
            $this->Auth->allow($this->request->action);
        }


        if (($this->request->controller !== 'menus') && ($this->request->action !== 'build_menu')) {
            $controllerAction = $this->request->controller . 'Controller::' . $this->request->action;
           // debug($controllerAction);
            $this->set('helpPage', $this->{$this->modelClass}->getHelpPage($controllerAction));
        }

        //allow everything by default
        $this->Auth->allow();

        if ((bool)AuthComponent::user()) {
            $user = $this->Auth->user();
            $this->set(compact('user'));
        }

        $companyName = $this->getSetting('companyName');

        $this->set(compact('companyName'));

        $this->set('isLoggedIn', $this->Auth->user() !== null);
    }

    /**
     * @param $date
     * @param $format
     */
    public function formatYYMMDD($date, $format = '%y%m%d')
    {
        return CakeTime::format($date, $format);
    }

    /**
     * @param $user
     */
    public function isAuthorized($user)
    {
        // Admin can access every action

        $allowed_actions = ['view', 'display'];

        if (isset($user['role']) && $user['role'] === 'admin') {
            return true;
        }

        // allow all
        if (in_array($this->request->action, $allowed_actions)) {
            return true;
        }

        // Default deny
        $this->Flash->set('Access Denied', ['key' => 'auth', 'element' => 'error']);
        return false;
    }

    /**
     * getSetting
     * makes getSetting available to all controller via $this->getSetting
     * and passes it to the corresponding model method
     * @return mixed
     */
    public function getSetting($settingname, $inComment = false)
    {
        return $this->{$this->modelClass}->getSetting($settingname, $inComment);
    }

}
