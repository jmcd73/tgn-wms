{"version":3,"sources":["Wrap.js","WrapCheckbox.js","AlertMessage.js","App.js","serviceWorker.js","index.js"],"names":["Wrap","props","react_default","a","createElement","Fragment","children","popoverText","CustomPopover","placement","console","log","Popover_default","Object","assign","id","concat","title","WrapCheckbox","disabled","childKey","OverlayTrigger_default","trigger","rootClose","overlay","WrapCheckbox_CustomPopover","style","padding","margin","key","AlertMessage","bsStyle","strongText","normalText","onDismiss","options","success","icon","faCheckCircle","warning","faExclamation","info","faInfoCircle","danger","faExclamationTriangle","CSSTransition","in","show","timeout","classNames","unmountOnExit","Alert_default","index_es","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","defaults","isExpanded","products","shipmentTypeDisabled","labelLists","loading","redirect","labelCounts","showAlert","errors","shipment","operation","shipment_type","shipped","shipper","destination","product_type_id","labelIds","isLoading","productType","productTypeName","activeKey","loadedData","productTypes","baseUrl","state","_objectSpread","setProductType","bind","assertThisInitialized","updateActiveKey","getLabelList","addRemoveLabel","toggleIsExpanded","buildLabelString","getLabelObject","toggleShipped","toggleAlert","setShipmentDetail","submitData","value","setState","defineProperty","n","_this2","suffix","filter","x","url","join","fetch","headers","Accept","X-Requested-With","then","resp","json","d","codeDescs","createCodeDescriptions","shipment_labels","toConsumableArray","fill","type","thisShipment","_d$thisShipment$Shipm","Shipment","Pallet","map","location","Location","catch","e","labelObject","item","description","_this$state","codeDesc","buildCodeDescString","itemId","item_id","updateSingleLabelCount","getSingleItemLabelCount","indexOf","productArray","index","length","itemString","count","_this3","arguments","undefined","ctr","reduce","accum","current","push","productTitle","labelList","idx","newLabelList","b","_this4","newAlertState","setTimeout","_this5","_this$state2","_this$state$shipment","postObject","cur","shipment_id","method","mode","cache","credentials","Content-Type","body","JSON","stringify","response","error","keys","fieldName","isAdd","labelId","updateCodeDescriptions","target","_this$parseRouterArgs","parseRouterArgs","fetchData","_this$props$match$par","match","params","typeOrId","isNaN","_this$parseRouterArgs2","getProductType","_this6","ProductType","name","best_before","pl_ref","qty","_this7","_this$state3","shipperError","shippedError","destinationError","selectedCount","labelsOnShipment","classes","spinner","Row_default","Col_default","lg","className","PulseLoader_default","size","color","Checkbox_default","bsClass","checked","onChange","window","src_Wrap","src_AlertMessage_0","textTransform","Form_default","onSubmit","preventDefault","FormGroup_default","validationState","getValidationState","bsSize","controlId","ControlLabel_default","FormControl_default","placeholder","_this7$state$errors","newState","objectWithoutProperties","required","Feedback","HelpBlock_default","lib","selected","onInputChange","onSearch","query","labelKey","Button_default","onClick","PanelGroup_default","onSelect","product","Panel_default","eventKey","expanded","onToggle","Heading","Title","toggle","Badge_default","Body","collapsible","checkboxClasses","slice","Glyphicon_default","glyph","pointerEvents","src_WrapCheckbox","componentClass","React","Component","exported","withRouter","Boolean","hostname","root","document","getElementById","getAttribute","ReactDOM","render","react_router_dom","react_router","path","exact","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8432133.chunk.js","sourcesContent":["import React from \"react\";\n/* wrap in div if dev and nothing if production */\nconst Wrap = (props) => {\n\tlet renderThis = null\n\n\tif(process.env.NODE_ENV === 'development') {\n\t\trenderThis = ( <div className=\"container\">\n\t\t\t\t\t\t\t{props.children}\n\t\t</div> )\n\t} else {\n\t\trenderThis = (\n\t\t\t<>\n\t\t\t\t{props.children}\n\t\t\t</>\n\t\t);\n\t}\n\treturn renderThis;\n}\n\nexport default Wrap;\n","import React from \"react\";\nimport OverlayTrigger from \"react-bootstrap/lib/OverlayTrigger\";\nimport Popover from \"react-bootstrap/lib/Popover\";\n\nconst popoverText = (\n\t<>\n\t\t<p>\n\t\t\tThis pallet doesn&apos;t have enough days product life left before it expires to allow\n\t\t\tit to ship.\n\t\t</p>\n\t\t<p>\n\t\t\tYou won&apos;t be able to add this pallet to a shipper until you mark it\n\t\t\tas being allowed to ship.\n\t\t</p>\n\t\t\t<ol>\n\t\t\t\t<li>Leave this screen and go to Warehouse => View Stock.</li>\n\t\t\t\t<li>Find the pallet and click it&apos;s \"Edit\" link</li>\n\t\t\t\t<li>If a login screen appears login with your username and password</li>\n\t\t\t\t<li>Tick the &quot;Ship low dated&quot; checkbox</li>\n\t\t\t\t<li>click Submit</li>\n\t\t\t</ol>\n\n\t</>\n);\n\nconst CustomPopover = props => {\n\tconst { placement } = props;\n\tconsole.log(props);\n\n\treturn (\n\t\t<Popover\n\t\t\t{...props}\n\t\t\tid={`popover-positioned-${placement}`}\n\t\t\ttitle={`Low Dated Stock`}\n\t\t>\n\t\t\t{popoverText}\n\t\t</Popover>\n\t);\n};\nconst WrapCheckbox = props => {\n\tconst { disabled, children, childKey } = props;\n\tif (disabled) {\n\t\treturn (\n\t\t\t<OverlayTrigger\n\t\t\t\tplacement=\"bottom\"\n\t\t\t\ttrigger=\"click\"\n\t\t\t\trootClose={true}\n\t\t\t\t//container={document}\n\t\t\t\toverlay={<CustomPopover />}\n\t\t\t>\n\t\t\t\t<span style={{padding: 0, margin: 0}} key={childKey}>\n\t\t\t\t\t{children}\n\t\t\t\t</span>\n\t\t\t</OverlayTrigger>\n\t\t);\n\t} else {\n\t\treturn children;\n\t}\n};\n\nexport default WrapCheckbox;\n","import React from \"react\";\nimport Alert from \"react-bootstrap/lib/Alert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n\tfaCheckCircle,\n\tfaExclamation,\n\tfaInfoCircle,\n\tfaExclamationTriangle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport './AlertMessage.css';\nimport { CSSTransition } from \"react-transition-group\";\nconst AlertMessage = props => {\n\tconst { bsStyle, strongText, normalText, onDismiss } = props;\n\tconst options = {\n\t\tsuccess: { icon: faCheckCircle },\n\t\twarning: { icon: faExclamation },\n\t\tinfo: { icon: faInfoCircle },\n\t\tdanger: { icon: faExclamationTriangle }\n\t};\n\n\treturn (\n\t\t<CSSTransition\n\t\t\tin={props.show}\n\t\t\ttimeout={300}\n\t\t\tclassNames=\"toggen\"\n\t\t\tunmountOnExit\n\t\t>\n\t\t\t<Alert onDismiss={onDismiss} bsStyle={bsStyle}>\n\t\t\t\t<strong>\n\t\t\t\t\t<FontAwesomeIcon icon={options[bsStyle].icon} /> {strongText}{\" \"}\n\t\t\t\t</strong>{\" \"}\n\t\t\t\t{normalText}\n\t\t\t</Alert>\n\t\t</CSSTransition>\n\t);\n};\n\nexport default AlertMessage;\n","import React from \"react\";\nimport \"./App.css\";\nimport PanelGroup from \"react-bootstrap/lib/PanelGroup\";\nimport Panel from \"react-bootstrap/lib/Panel\";\nimport FormControl from \"react-bootstrap/lib/FormControl\";\nimport FormGroup from \"react-bootstrap/lib/FormGroup\";\nimport ControlLabel from \"react-bootstrap/lib/ControlLabel\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Checkbox from \"react-bootstrap/lib/Checkbox\";\nimport Badge from \"react-bootstrap/lib/Badge\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport Glyphicon from \"react-bootstrap/lib/Glyphicon\";\nimport { withRouter } from \"react-router\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport HelpBlock from \"react-bootstrap/lib/HelpBlock\";\nimport Wrap from \"./Wrap\";\nimport WrapCheckbox from \"./WrapCheckbox\";\nimport AlertMessage from \"./AlertMessage\";\nimport Form from \"react-bootstrap/lib/Form\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\n// import queryString from \"query-string\";\n\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\"; // ES2015\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaults = {\n      isExpanded: [],\n      products: [],\n      shipmentTypeDisabled: false,\n      labelLists: {},\n      loading: false,\n      redirect: false,\n      labelCounts: {},\n      showAlert: false,\n      errors: {},\n      shipment: {\n        operation: \"\",\n        id: \"\",\n        shipment_type: \"\",\n        shipped: false,\n        shipper: \"\",\n        destination: \"\",\n        product_type_id: \"\",\n        labelIds: []\n      },\n      isLoading: false,\n      productType: 0,\n      productTypeName: \"\",\n      activeKey: 99999,\n      loadedData: [],\n      options: [],\n      productTypes: [],\n      baseUrl: this.props.baseUrl\n    };\n    this.state = {\n      ...this.defaults\n    };\n\n    this.setProductType = this.setProductType.bind(this);\n    this.updateActiveKey = this.updateActiveKey.bind(this);\n    this.getLabelList = this.getLabelList.bind(this);\n    this.addRemoveLabel = this.addRemoveLabel.bind(this);\n    this.toggleIsExpanded = this.toggleIsExpanded.bind(this);\n    this.buildLabelString = this.buildLabelString.bind(this);\n    this.getLabelObject = this.getLabelObject.bind(this);\n    this.toggleShipped = this.toggleShipped.bind(this);\n    this.toggleAlert = this.toggleAlert.bind(this);\n    this.setShipmentDetail = this.setShipmentDetail.bind(this);\n    this.submitData = this.submitData.bind(this);\n  }\n\n  setShipmentDetail(key, value) {\n    this.setState({\n      shipment: { ...this.state.shipment, [key]: value }\n    });\n  }\n\n  updateActiveKey(n) {\n    this.setState({ activeKey: n });\n  }\n\n  fetchData(operation, productType, id) {\n    this.setState({\n      ...this.defaults,\n      loading: true,\n      productType: productType || \"\"\n    });\n\n    const suffix = [operation, productType, id].filter(x => x);\n    const url = this.state.baseUrl + \"Shipments/\" + suffix.join(\"/\");\n\n    fetch(url, {\n      headers: {\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      }\n    })\n      .then(resp => {\n        return resp.json();\n      })\n      .then(d => {\n        const codeDescs = this.createCodeDescriptions(d.shipment_labels);\n        console.log(d);\n        this.setState({\n          loadedData: d.shipment_labels,\n          isExpanded: [...codeDescs].fill(false),\n          products: codeDescs,\n          shipment: { ...this.state.shipment, operation: operation },\n          loading: false\n        });\n        if (d.type) {\n          this.setState({\n            productType: d.type\n          });\n        }\n        if (d.thisShipment) {\n          const {\n            shipper,\n            destination,\n            shipped,\n            shipment_type,\n            product_type_id,\n            id\n          } = d.thisShipment.Shipment;\n          const { Pallet } = d.thisShipment;\n          const loadedData = Pallet.map(value => {\n            const location = { ...value.Location };\n            delete value.Location;\n            return {\n              Pallet: value,\n              Location: location\n            };\n          });\n          const labelIds = Pallet.map(value => {\n            return value.id;\n          });\n\n          this.setState({\n            loadedData: loadedData.concat(d.shipment_labels),\n            shipmentTypeDisabled: true,\n            productType: product_type_id,\n            shipment: {\n              ...this.state.shipment,\n              shipment_type,\n              shipped,\n              id,\n              shipper,\n              product_type_id,\n              destination,\n              labelIds\n            }\n          });\n        }\n      })\n      .catch(e => console.log(e));\n  }\n\n  buildCodeDescString(labelObject) {\n    return labelObject.Pallet.item + \" \" + labelObject.Pallet.description;\n  }\n  /**\n   *\n   * @param {*} labelObject\n   */\n  updateCodeDescriptions(labelObject) {\n    let { products, loadedData } = this.state;\n\n    const codeDesc = this.buildCodeDescString(labelObject);\n    const { item_id: itemId } = labelObject.Pallet;\n    this.updateSingleLabelCount(\n      codeDesc,\n      this.getSingleItemLabelCount(loadedData, itemId)\n    );\n\n    if (products.indexOf(codeDesc) === -1) {\n      this.setState({\n        products: [codeDesc, ...products]\n      });\n    }\n  }\n\n  getSingleItemLabelCount(productArray, itemId) {\n    return productArray.filter((value, index) => {\n      return value.Pallet.item_id === itemId;\n    }).length;\n  }\n  updateSingleLabelCount(itemString, count) {\n    let labelCounts = { ...this.state.labelCounts };\n\n    this.setState({\n      labelCounts: { ...labelCounts, [itemString]: count }\n    });\n  }\n  createCodeDescriptions(productArray = []) {\n    let ctr = 0;\n    let labelCounts = {};\n\n    const codeDesc = productArray.reduce((accum, current) => {\n      const codeDesc = this.buildCodeDescString(current);\n      if (accum.indexOf(codeDesc) === -1) {\n        accum.push(codeDesc);\n        ctr = 1;\n      }\n\n      labelCounts[codeDesc] = ctr++;\n\n      return accum;\n    }, []);\n    this.setState({\n      labelCounts: { ...this.state.labelCounts, ...labelCounts }\n    });\n    return codeDesc;\n  }\n  getLabelList(productTitle) {\n    const loadedData = this.state.loadedData;\n\n    const labelList = loadedData.reduce((accum, current, idx) => {\n      const codeDesc = current.Pallet.item + \" \" + current.Pallet.description;\n      if (codeDesc === productTitle) {\n        accum.push(current);\n      }\n      return accum;\n    }, []);\n    let currentLabelList = this.state.labelLists;\n    let newLabelList = { ...currentLabelList, [productTitle]: labelList };\n    this.setState({ labelLists: newLabelList });\n  }\n  toggleIsExpanded(b, idx) {\n    let isExpanded = [...this.state.isExpanded];\n    isExpanded[idx] = b;\n    this.setState({ isExpanded: isExpanded });\n  }\n\n  toggleAlert() {\n    const newAlertState = !this.state.showAlert;\n    this.setState({ showAlert: newAlertState });\n    if (newAlertState) {\n      setTimeout(() => {\n        this.setState({ showAlert: !newAlertState });\n      }, 4000);\n    }\n  }\n\n  submitData() {\n    this.setState({\n      errors: {},\n      loading: true\n    });\n    const { baseUrl, productType } = this.state;\n\n    const {\n      operation,\n      shipper,\n      shipped,\n      id,\n      destination,\n      labelIds\n    } = this.state.shipment;\n\n    const parts = [operation, id].filter(x => x);\n\n    const url = baseUrl + \"Shipments/\" + parts.join(\"/\");\n\n    let postObject = {\n      Shipment: {\n        shipper: shipper,\n        destination: destination,\n        shipped: shipped,\n        product_type_id: productType\n      },\n      Pallet: labelIds\n    };\n\n    switch (operation) {\n      case \"add\":\n        break;\n      case \"edit\":\n        postObject.Shipment.id = id;\n        const labels = labelIds.map(cur => {\n          return { shipment_id: id, id: cur };\n        });\n        postObject = { ...postObject, Pallet: labels };\n        console.log(\"postObject\", postObject);\n        break;\n      default:\n        console.log(\"it broken\");\n    }\n\n    fetch(url, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      },\n      redirect: \"error\", // manual, *follow, error\n      //referrer: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify(postObject) // body data type must match \"Content-Type\" header\n    })\n      .then(response => response.json())\n      .then(d => {\n        /**\n                 *  \"error\": {\n        \"shipper\": [\n            \"Shipment number must be unique\"\n        ]\n    },\n                 */\n        if (d.error) {\n          // eslint-disable-next-line array-callback-return\n          Object.keys(d.error).map(fieldName => {\n            this.setState({\n              errors: {\n                ...this.state.errors,\n                [fieldName]: d.error[fieldName].join(\", \")\n              }\n            });\n          });\n        } else {\n          this.setState({\n            redirect: true\n          });\n        }\n        this.setState({ loading: false });\n      });\n  }\n\n  toggleShipped() {\n    this.setState({\n      shipment: {\n        ...this.state.shipment,\n        shipped: !this.state.shipment.shipped\n      }\n    });\n  }\n\n  addRemoveLabel(isAdd, labelId) {\n    let { shipment } = this.state;\n    let labelIds = [...shipment.labelIds];\n\n    this.updateCodeDescriptions(this.getLabelObject(labelId)[0]);\n\n    if (isAdd && labelIds.indexOf(labelId) === -1) {\n      labelIds.push(labelId);\n    }\n    if (!isAdd) {\n      labelIds = labelIds.filter(value => {\n        return value !== labelId;\n      });\n    }\n\n    this.setState({\n      shipment: { ...shipment, labelIds: labelIds }\n    });\n  }\n  setProductType(e) {\n    const productType = e.target.value;\n\n    if (productType === \"\") {\n      this.setState({ products: [] });\n      return;\n    }\n    if (this.state.productType !== productType) {\n      this.setState({ productType: productType });\n      const { operation, id } = this.parseRouterArgs();\n      this.fetchData(operation, productType, id);\n    }\n  }\n\n  parseRouterArgs() {\n    // gotta fix this it's ugggggly move it out of here\n    let { operation, typeOrId } = this.props.match.params;\n    let productType = null;\n    let id = null;\n\n    switch (operation) {\n      case \"add\": {\n        if (!typeOrId) {\n          productType = this.state.productType;\n        } else {\n          productType = typeOrId;\n        }\n        break;\n      }\n      case \"edit\": {\n        if (!isNaN(typeOrId)) {\n          console.log(\"typeOrId isInteger\");\n          id = typeOrId;\n        }\n        this.setState({\n          shipmentTypeDisabled: true\n        });\n        break;\n      }\n      default:\n        operation = \"add\";\n        productType = this.state.productType;\n    }\n\n    return { operation: operation, productType: productType, id: id };\n  }\n\n  getValidationState(fieldName) {\n    if (this.state.errors[fieldName] !== undefined) {\n      return \"error\";\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const { operation, productType, id } = this.parseRouterArgs();\n\n    this.setState({\n      baseUrl: this.props.baseUrl\n    });\n    this.fetchData(operation, productType, id);\n\n    this.getProductType(productType);\n  }\n\n  getProductType(productType) {\n    const url = this.state.baseUrl + `ProductTypes/view/${productType}`;\n    console.log(\"pt\", productType);\n    if (productType) {\n      fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n      })\n        .then(resp => {\n          return resp.json();\n        })\n        .then(d => {\n          if (d.productType.ProductType) {\n            this.setState({\n              productTypeName: d.productType.ProductType.name\n            });\n          }\n          console.log(\"pt\", d);\n        })\n        .catch(e => {\n          throw e;\n        });\n    }\n  }\n\n  getLabelObject(id) {\n    const { loadedData } = this.state;\n    const ret = loadedData.filter((current, idx) => {\n      return current.Pallet.id === id;\n    });\n    return ret;\n  }\n  buildLabelString(labelObject) {\n    const { Location, Pallet } = labelObject;\n    const { location } = Location;\n    const { item, best_before, pl_ref, qty, description } = Pallet;\n\n    const stringValues = [\n      location,\n      item,\n      best_before,\n      pl_ref,\n      qty,\n      description\n    ];\n    return stringValues.join(\", \");\n  }\n  render() {\n    const {\n      products,\n      labelLists,\n      showAlert,\n      labelCounts,\n      isExpanded,\n      shipment,\n      productTypeName,\n      loading,\n      errors,\n      baseUrl\n    } = this.state;\n\n    const shipperError = errors[\"shipper\"] || \"\";\n    const shippedError = errors[\"shipped\"] || \"\";\n    const destinationError = errors[\"destination\"] || \"\";\n    const { labelIds, shipper, shipped, operation } = shipment;\n    const selectedCount = labelIds.length;\n    let labelsOnShipment = null;\n    let classes = [\"checkbox\", \"fixed\", \"pallet-list\"];\n    let spinner = null;\n    if (loading) {\n      spinner = (\n        <Row>\n          <Col lg={12}>\n            <div className=\"text-center\">\n              <PulseLoader loading={loading} size={14} color={\"#ddd\"} />\n            </div>\n          </Col>\n        </Row>\n      );\n    }\n\n    if (labelIds) {\n      labelsOnShipment = labelIds.map((id, idx) => {\n        const labelObject = this.getLabelObject(id)[0];\n        return (\n          <Checkbox\n            bsClass={classes.join(\" \")}\n            key={labelObject.Pallet.pl_ref}\n            checked\n            onChange={e =>\n              this.addRemoveLabel(e.target.checked, labelObject.Pallet.id)\n            }\n          >\n            {this.buildLabelString(labelObject)}\n          </Checkbox>\n        );\n      });\n    }\n\n    if (this.state.redirect && process.env.NODE_ENV === \"production\") {\n      window.location = baseUrl + \"Shipments/\";\n    }\n\n    return (\n      <Wrap>\n        <Row>\n          <Col lg={12}>\n            <AlertMessage\n              strongText=\"bold this\"\n              normalText=\"Message that\"\n              bsStyle=\"info\"\n              show={showAlert}\n              onDismiss={this.toggleAlert}\n            />\n\n            <h3\n              style={{ textTransform: \"capitalize\" }}\n            >{`${operation} ${productTypeName} Shipment`}</h3>\n          </Col>\n        </Row>\n        <Row className=\"bpad\">\n          <Col lg={12}>\n            <Form onSubmit={e => e.preventDefault()}>\n              <Row>\n                <Col lg={3}>\n                  <FormGroup\n                    validationState={this.getValidationState(\"shipper\")}\n                    bsSize=\"sm\"\n                    controlId=\"shipper\"\n                  >\n                    <ControlLabel>Shipment</ControlLabel>{\" \"}\n                    <FormControl\n                      type=\"text\"\n                      value={shipper}\n                      placeholder=\"Shipment\"\n                      onChange={e => {\n                        const { shipper, ...newState } = this.state.errors;\n                        this.setState({\n                          errors: {\n                            ...newState\n                          }\n                        });\n\n                        this.setShipmentDetail(e.target.id, e.target.value);\n                      }}\n                      required=\"required\"\n                    />\n                    <FormControl.Feedback />\n                    <HelpBlock>{shipperError}</HelpBlock>\n                  </FormGroup>\n                </Col>\n                <Col lg={3}>\n                  <FormGroup\n                    controlId=\"destination\"\n                    bsSize={\"sm\"}\n                    validationState={this.getValidationState(\"destination\")}\n                  >\n                    <ControlLabel>Destination</ControlLabel>\n                    <AsyncTypeahead\n                      placeholder=\"Destination\"\n                      isLoading={this.state.isLoading}\n                      id=\"destination\"\n                      name=\"destination\"\n                      selected={[this.state.shipment.destination]}\n                      onChange={selected => {\n                        if (selected.length > 0) {\n                          let destination = selected[0].value;\n                          this.setShipmentDetail(\"destination\", destination);\n                        }\n                      }}\n                      onInputChange={destination => {\n                        this.setShipmentDetail(\"destination\", destination);\n                      }}\n                      onSearch={query => {\n                        this.setState({ isLoading: true });\n                        fetch(\n                          `${this.state.baseUrl}Shipments/destinationLookup?term=${query}`,\n                          {\n                            headers: {\n                              Accept: \"application/json\"\n                            }\n                          }\n                        )\n                          .then(resp => resp.json())\n                          .then(json => {\n                            console.log(json);\n                            this.setState({\n                              isLoading: false,\n                              options: json\n                            });\n                          });\n                      }}\n                      labelKey=\"value\"\n                      options={this.state.options}\n                    />\n                    <HelpBlock>{destinationError}</HelpBlock>\n                  </FormGroup>\n                </Col>\n                <Col lg={4}>\n                  <FormGroup\n                    className=\"cb-shipped\"\n                    validationState={this.getValidationState(\"shipped\")}\n                  >\n                    <Checkbox\n                      validationState={this.getValidationState(\"shipped\")}\n                      checked={shipped}\n                      onChange={this.toggleShipped}\n                    >\n                      Shipped\n                    </Checkbox>\n                    <HelpBlock>{shippedError}</HelpBlock>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col lg={6}>\n                  <Button\n                    bsStyle=\"primary\"\n                    bsSize=\"sm\"\n                    className=\"my-btn\"\n                    onClick={this.submitData}\n                    type=\"submit\"\n                  >\n                    Submit\n                  </Button>\n                </Col>\n                <Col lg={6}>{spinner}</Col>\n              </Row>\n            </Form>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col lg={6}>\n            <div className=\"pre-scrollable\">\n              <PanelGroup\n                id=\"accordion-controlled-example\"\n                activeKey={this.state.activeKey}\n                onSelect={this.updateActiveKey}\n              >\n                {products &&\n                  products.map((product, idx) => {\n                    return (\n                      <Panel\n                        key={`panel-${idx}`}\n                        eventKey={`panel-${idx}`}\n                        expanded={isExpanded[idx]}\n                        onToggle={b => {\n                          this.toggleIsExpanded(b, idx);\n                        }}\n                      >\n                        <Panel.Heading>\n                          <Panel.Title\n                            onClick={() => this.getLabelList(product)}\n                            toggle\n                          >\n                            {product}{\" \"}\n                            {labelCounts[product] && (\n                              <Badge>{labelCounts[product]}</Badge>\n                            )}\n                          </Panel.Title>\n                        </Panel.Heading>\n                        <Panel.Body collapsible>\n                          {labelLists[product] &&\n                            labelLists[product].map((value, idx) => {\n                              let icon = null;\n                              let checkboxClasses = classes.slice();\n                              const checked =\n                                this.state.shipment.labelIds.indexOf(\n                                  value.Pallet.id\n                                ) > -1;\n                              let style = {};\n                              if (!!+value.Pallet.disabled) {\n                                checkboxClasses.push(\"bg-danger\");\n                                icon = (\n                                  <>\n                                    <Glyphicon glyph=\"ban-circle\" />{\" \"}\n                                  </>\n                                );\n                                style = { pointerEvents: \"none\" };\n                              }\n                              return (\n                                <WrapCheckbox\n                                  key={value.Pallet.pl_ref}\n                                  childKey={value.Pallet.pl_ref}\n                                  disabled={value.Pallet.disabled}\n                                >\n                                  <Checkbox\n                                    bsClass={checkboxClasses.join(\" \")}\n                                    disabled={value.Pallet.disabled}\n                                    checked={checked}\n                                    style={style}\n                                    key={value.Pallet.pl_ref}\n                                    onChange={e =>\n                                      this.addRemoveLabel(\n                                        e.target.checked,\n                                        value.Pallet.id\n                                      )\n                                    }\n                                  >\n                                    {icon}\n                                    {this.buildLabelString(value)}\n                                  </Checkbox>\n                                </WrapCheckbox>\n                              );\n                            })}\n                        </Panel.Body>\n                      </Panel>\n                    );\n                  })}\n              </PanelGroup>\n            </div>\n          </Col>\n          <Col lg={6}>\n            <Panel>\n              <Panel.Heading>\n                <Panel.Title componentClass=\"h3\">\n                  Currently On Shipment <Badge>{selectedCount}</Badge>\n                </Panel.Title>\n              </Panel.Heading>\n              <Panel.Body>{labelsOnShipment}</Panel.Body>\n            </Panel>\n          </Col>\n        </Row>\n      </Wrap>\n    );\n  }\n}\n\nconst exported = withRouter(App);\n\nexport default exported;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {Switch} from 'react-router';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = document.getElementById(\"root\");\n\nconst baseUrl = root.getAttribute(\"data-baseurl\");\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<Switch>\n\t\t<Route path=\"/\" exact\n\t\t\trender={(props) => <App {...props} baseUrl={baseUrl} />} />\n\t\t<Route path='/:operation(add|edit)/:typeOrId?'\n\t\t\trender={(props) => <App {...props} baseUrl={baseUrl} />} />\n\t\t<Route path={`${baseUrl}Shipments/addApp/:operation(add|edit)/:typeOrId?`}\n\t\t\trender={(props) => <App {...props} baseUrl={baseUrl} />} />\n\t\t</Switch>\n\t</BrowserRouter>,\n\troot\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}